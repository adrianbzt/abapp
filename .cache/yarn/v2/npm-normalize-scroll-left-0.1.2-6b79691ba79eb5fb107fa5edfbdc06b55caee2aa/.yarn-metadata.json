{
  "manifest": {
    "name": "normalize-scroll-left",
    "description": "Utility library to determine and normalize Element.scrollLeft behavior",
    "version": "0.1.2",
    "author": {
      "name": "Ali Taheri Moghaddar",
      "email": "ali.taheri.m@gmail.com"
    },
    "files": [
      "lib"
    ],
    "repository": {
      "type": "git",
      "url": "git@github.com:alitaheri/normalize-scroll-left.git"
    },
    "keywords": [
      "rtl",
      "dom",
      "scroll-left",
      "scrollLeft",
      "normalize",
      "browser",
      "element"
    ],
    "scripts": {
      "build": "rimraf lib && tsc",
      "prepublishOnly": "npm run build",
      "lint": "tslint -e \"node_modules/**\" \"src/**/*.ts\"",
      "test": "mocha --compilers ts:ts-node/register \"src/**/*.spec.ts\""
    },
    "license": "MIT",
    "main": "lib/main.js",
    "types": "lib/main.d.ts",
    "devDependencies": {
      "@types/chai": "^4.0.4",
      "@types/mocha": "^2.2.43",
      "@types/node": "^8.0.34",
      "chai": "^4.1.2",
      "mocha": "^4.0.1",
      "rimraf": "^2.6.2",
      "ts-loader": "^2.3.7",
      "ts-node": "^3.3.0",
      "tslint": "^5.7.0",
      "tslint-eslint-rules": "^4.1.1",
      "tslint-microsoft-contrib": "^5.0.1",
      "typescript": "^2.5.3"
    },
    "_registry": "npm",
    "_loc": "/project/.cache/yarn/v2/npm-normalize-scroll-left-0.1.2-6b79691ba79eb5fb107fa5edfbdc06b55caee2aa/package.json",
    "readmeFilename": "readme.md",
    "readme": "# Normalize Scroll Left for Right-to-Left\n\nThis library normalizes the `Element.scrollLeft` property when direction is `rtl`.\n\nAll the hardwork are based on [this juqery plugin](https://github.com/othree/jquery.rtl-scroll-type)\nand [this stackoverflow answer](https://stackoverflow.com/a/24394376).\n\nSince `Element.scrollLeft`'s behavior with `dir=\"rtl\"` is not defined in any spec we use\na feature detection logic to determine the behavior of the current browser.\n\nTypes of `scrollLeft` (`scrollWidth` = 100) (Copied from \n[here](https://github.com/othree/jquery.rtl-scroll-type#3-types-of-scrollleft-scrollwidth--100))\n\nBrowser        | Type          | Most Left | Most Right | Initial\n-------------- | ------------- | --------- | ---------- | -------\nWebKit         | default       | 0         | 100        | 100\nFirefox/Opera  | negative      | -100      | 0          | 0\nIE/Edge        | reverse       | 100       | 0          | 0\n\n## Installation\n\nYou can install this package with the following command:\n\n```sh\nnpm install normalize-scroll-left\n```\n\n## API\n\nThis library exposes these methods:\n\n### `detectScrollType`\n\n```ts\ntype ScrollType = 'indeterminate' | 'default' | 'negative' | 'reverse';\nfunction detectScrollType(): ScrollType;\n```\n\nThis function returns the scroll type detected, Keep in mind, this function\ncaches the result as it should render a dummy on the DOM (which is expensive).\nMake sure the first invocation of this function happens **after** the body is loaded.\n\n**note**: To support server-side-rendering, it will output `indeterminate` if\nit detects a non-browser environment.\n\n```javascript\nimport { detectScrollType } from 'normalize-scroll-left';\n\nconst type = detectScrollType();\n```\n\nThe output is not based on the browser, but feature detection:\n\nBrowser        | Type\n-------------- | -------------\nWebKit         | `default`\nFirefox/Opera  | `negative`\nIE/Edge        | `reverse`\nOther/Server   | `indeterminate`\n\n### `getNormalizedScrollLeft`\n\n```ts\nfunction getNormalizedScrollLeft(element: HTMLElement, direction: 'rtl' | 'ltr'): number;\n```\n\nYou can use this method to get the normalized `scrollLeft` property of an element.\nYou should explicitly pass the direction for the following reasons:\n\n1. Querying the `getComputedStyle` is expensive and might cause a reflow.\n2. The behavior shouldn't be changed when direction is `ltr`.\n\nThe output is `NaN` on the server. Otherwise, it will mimic the behavior of\n`WebKit` as it's the esiest to work with.\n\n```ts\nimport { getNormalizedScrollLeft } from 'normalize-scroll-left';\n\nconst element = document.getElementById('my-scrollable-container');\n\n// element.scrollWidth = 100;\n\nconst scrollLeft = getNormalizedScrollLeft(element, 'rtl');\n\n// scrollLeft will always be from 0 (Most Left) to 100 (Most Right).\n// It will initially be 100, That means the most right.\n```\n\n### `setNormalizedScrollLeft`\n\n```ts\nfunction setNormalizedScrollLeft(\n  element: HTMLElement,\n  scrollLeft: number,\n  direction: 'rtl' | 'ltr',\n): void;\n```\n\nYou can use this method to set the `scrollLeft` property of an element as normalized.\nYou should explicitly pass the direction for the same reasons as `getNormalizedScrollLeft`:\n\nFor `scrollWidth = 100` the argument `scrollLeft` must be between `0` and `100`. This\nfunction will automatically convert it into something the current browser understands.\n\n```ts\nimport { setNormalizedScrollLeft } from 'normalize-scroll-left';\n\nconst element = document.getElementById('my-scrollable-container');\n\n// element.scrollWidth = 100, element.clientWidth = 20;\n\nsetNormalizedScrollLeft(element, 20, 'rtl');\n\n// Will set element.scrollLeft to ...\n//  20 in WebKit (chrome)\n//  -60 in Firefox/Opera\n//  60 in IE/Edge\n// Does nothing on the server\n```\n\n## Typings\n\nThe typescript type definitions are also available and are installed via npm.\n\n## License\nThis project is licensed under the\n[MIT license](https://github.com/alitaheri/normalize-scroll-left/blob/master/LICENSE).",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Ali Taheri Moghaddar, ali.taheri.m@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/normalize-scroll-left/-/normalize-scroll-left-0.1.2.tgz#6b79691ba79eb5fb107fa5edfbdc06b55caee2aa",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/normalize-scroll-left/-/normalize-scroll-left-0.1.2.tgz",
    "hash": "6b79691ba79eb5fb107fa5edfbdc06b55caee2aa",
    "registry": "npm",
    "packageName": "normalize-scroll-left"
  },
  "registry": "npm",
  "hash": "6b79691ba79eb5fb107fa5edfbdc06b55caee2aa"
}