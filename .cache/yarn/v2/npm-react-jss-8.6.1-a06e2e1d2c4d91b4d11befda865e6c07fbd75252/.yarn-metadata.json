{
  "manifest": {
    "name": "react-jss",
    "version": "8.6.1",
    "description": "JSS integration with React",
    "main": "lib/index.js",
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "all": "npm run lint && npm run test && npm run build && npm run size",
      "build": "npm run clean && npm run build:lib && npm run build:dist",
      "build:lib": "babel src --out-dir lib --ignore src/tests",
      "build:dist": "npm run build:dist:max && npm run build:dist:min",
      "build:dist:max": "cross-env NODE_ENV=development webpack src/index.js dist/react-jss.js",
      "build:dist:min": "cross-env NODE_ENV=production webpack src/index.js dist/react-jss.min.js",
      "clean": "rimraf {lib,dist,tmp}/*",
      "lint": "eslint ./src",
      "lint:staged": "lint-staged",
      "test": "cross-env NODE_ENV=test karma start --single-run ",
      "test:watch": "cross-env NODE_ENV=test karma start",
      "prepublishOnly": "npm run all",
      "size": "size-limit 22KB dist/react-jss.js",
      "preversion": "npm run size"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/cssinjs/react-jss.git"
    },
    "keywords": [
      "react",
      "style",
      "css",
      "stylesheet",
      "jss",
      "hoc",
      "decorator"
    ],
    "author": {
      "name": "Dan Abramov",
      "email": "dan.abramov@me.com",
      "url": "http://github.com/gaearon"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/cssinjs/react-jss/issues"
    },
    "homepage": "https://github.com/cssinjs/react-jss",
    "peerDependencies": {
      "react": ">=0.13"
    },
    "devDependencies": {
      "babel-cli": "^6.10.1",
      "babel-core": "^6.9.1",
      "babel-eslint": "^7.0.0",
      "babel-loader": "^6.4.1",
      "babel-plugin-istanbul": "^3.0.0",
      "babel-plugin-rewire": "^1.1.0",
      "babel-plugin-transform-es3-member-expression-literals": "^6.8.0",
      "babel-plugin-transform-es3-property-literals": "^6.8.0",
      "babel-preset-es2015": "^6.9.0",
      "babel-preset-react": "^6.5.0",
      "babel-preset-stage-0": "^6.5.0",
      "common-tags": "^1.4.0",
      "cross-env": "^3.0.0",
      "es5-shim": "^4.5.9",
      "eslint": "^3.6.0",
      "eslint-config-airbnb": "^12.0.0",
      "eslint-config-jss": "^2.3.0",
      "eslint-plugin-import": "^2.0.0",
      "eslint-plugin-jsx-a11y": "^2.2.2",
      "eslint-plugin-react": "^6.3.0",
      "expect.js": "^0.3.1",
      "karma": "^1.3.0",
      "karma-chrome-launcher": "^2.0.0",
      "karma-coverage": "^1.1.1",
      "karma-mocha": "^1.1.1",
      "karma-mocha-reporter": "^2.2.0",
      "karma-sourcemap-loader": "^0.3.7",
      "karma-webpack": "^1.8.0",
      "lint-staged": "^4.0.1",
      "mocha": "^3.0.2",
      "pre-commit": "^1.1.3",
      "puppeteer": "^0.13.0",
      "react": "^16.1.0",
      "react-dom": "^16.1.0",
      "rimraf": "^2.5.4",
      "sinon": "^4.5.0",
      "size-limit": "^0.2.0",
      "webpack": "^1.13.1"
    },
    "dependencies": {
      "hoist-non-react-statics": "^2.5.0",
      "jss": "^9.7.0",
      "jss-preset-default": "^4.3.0",
      "prop-types": "^15.6.0",
      "theming": "^1.3.0"
    },
    "lint-staged": {
      "src/**/*.js": [
        "eslint --fix",
        "git add"
      ]
    },
    "pre-commit": "lint:staged",
    "files": [
      "lib",
      "dist",
      "readme.md",
      "changelog.md",
      "LICENSE"
    ],
    "_registry": "npm",
    "_loc": "/project/.cache/yarn/v2/npm-react-jss-8.6.1-a06e2e1d2c4d91b4d11befda865e6c07fbd75252/package.json",
    "readmeFilename": "readme.md",
    "readme": "# JSS integration with React\n\n[![Gitter](https://badges.gitter.im/JoinChat.svg)](https://gitter.im/cssinjs/lobby)\n[![Build Status](https://travis-ci.org/cssinjs/react-jss.svg?branch=master)](https://travis-ci.org/cssinjs/react-jss)\n\nReact-JSS provides components for [JSS](https://github.com/cssinjs/jss) as a layer of abstraction. JSS and the [default preset](https://github.com/cssinjs/jss-preset-default) are already built in! Try it out in the [playground](https://codesandbox.io/s/j3l06yyqpw).\n\nBenefits compared to lower level core:\n\n- Theming support.\n- Critical CSS extraction.\n- Lazy evaluation - sheet is created only when the component will mount.\n- Auto attach/detach - sheet will be rendered to the DOM when the component is about to mount, and will be removed when no element needs it.\n- A Style Sheet gets shared between all elements.\n- Function values and rules are updated automatically with props.\n\n## Table of Contents\n\n* [Install](#install)\n* [Usage](#usage)\n  * [Basic](#basic)\n  * [Dynamic Values](#dynamic-values)\n  * [Theming](#theming)\n  * [Server-side rendering](#server-side-rendering)\n  * [React tree traversing](#react-tree-traversing)\n  * [Reuse styles in different components](#reuse-styles-in-different-components)\n  * [The inner component](#the-inner-component)\n  * [The inner ref](#the-inner-ref)\n  * [Custom setup](#custom-setup)\n  * [Decorators](#decorators)\n* [Contributing](#contributing)\n* [License](#license)\n\n## Install\n\n```\nnpm install --save react-jss\n```\n\n```\nyarn add react-jss\n```\n\n## Usage\n\nReact-JSS wraps your component with a [higher-order component](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750).\nIt injects aÂ `classes` prop, which is a simple map of rule names and generated class names. It can act both as a simple wrapping function and as an [ES7 decorator](https://github.com/wycats/javascript-decorators).\n\nTry it out in the [playground](https://codesandbox.io/s/j3l06yyqpw).\n\n### Basic\n\n```javascript\nimport React from 'react'\nimport { render } from 'react-dom'\n// Import React-JSS\nimport injectSheet from 'react-jss'\n\n// Create your Styles. Remember, since React-JSS uses the default preset,\n// most plugins are available without further configuration needed.\nconst styles = {\n  myButton: {\n    color: 'green',\n    margin: { // jss-expand gives more readable syntax\n      top: 5, // jss-default-unit makes this 5px\n      right: 0,\n      bottom: 0,\n      left: '1rem'\n    },\n    '& span': { // jss-nested applies this to a child span\n      fontWeight: 'bold' // jss-camel-case turns this into 'font-weight'\n    }\n  },\n  myLabel: {\n    fontStyle: 'italic'\n  }\n}\n\n// Define the component using these styles and pass it the 'classes' prop.\n// Use this to assign scoped class names.\nconst Button = ({ classes, children }) => (\n  <button className={classes.myButton}>\n    <span className={classes.myLabel}>\n      {children}\n    </span>\n  </button>\n)\n\n// Finally, inject the stylesheet into the component.\nconst StyledButton = injectSheet(styles)(Button)\n// You can also export the component with\n// export default injectSheet(styles)(Button)\n\nconst App = () => (\n  <StyledButton>\n    Submit\n  </StyledButton>\n)\n\nrender(<App />, document.getElementById('root'))\n```\n\nThe above code will compile to\n\n```html\n<div id=\"root\">\n  <button class=\"Button-myButton-1-25\">\n    <span class=\"Button-myLabel-1-26\">\n      Submit\n    </span>\n  </button>\n</div>\n```\n\nand\n\n```css\n.Button-myButton-1-25 {\n  color: green;\n  margin: 5px 0 0 1rem;\n}\n.Button-myButton-1-25 span {\n  font-weight: bold;\n}\n.Button-myLabel-1-26 {\n  font-style: italic;\n}\n```\n\n### Dynamic values\n\nYou can use [function values](https://github.com/cssinjs/jss/blob/master/docs/json-api.md#function-values), function rules and observables out of the box. Function values and function rules will receive a props object once the component receives new props or mounts for the first time.\n\nThere are 2 caveats:\n\n1. Static properties are rendered first, so function values will have higher source order specificity.\n1. They have a [number of limitations](https://github.com/cssinjs/jss/issues/682) regarding the syntax, since they don't run through all plugins  right now.\n\n```javascript\nconst styles = {\n  myButton: {\n    padding: props => props.spacing\n  },\n  myLabel: (props) => ({\n    display: 'block',\n    color: props.labelColor,\n    fontWeight: props.fontWeight,\n    fontStyle: props.fontStyle\n  })\n}\n\nconst Button = ({ classes, children }) => (\n  <button className={classes.myButton}>\n    <span className={classes.myLabel}>\n      {children}\n    </span>\n  </button>\n)\n\nButton.defaultProps = {\n  spacing: 10,\n  fontWeight: 'bold',\n  labelColor: 'red'\n}\n\nconst StyledButton = injectSheet(styles)(Button)\n\nconst App = () => (\n  <StyledButton fontStyle='italic'>\n    Submit\n  </StyledButton>\n)\n```\n\nThe above code will compile to\n\n```html\n<div id=\"root\">\n  <button class=\"Button-myButton-1-25\">\n    <span class=\"Button-myLabel-1-26\">\n      Submit\n    </span>\n  </button>\n</div>\n```\n\nand\n\n```css\n.Button-myButton-1-25 {\n  padding: 10px;\n}\n.Button-myLabel-1-26 {\n  display: block;\n  color: red;\n  font-weight: bold;\n  font-style: italic;\n}\n```\n\n### Theming\n\nThe idea is that you define a theme, wrap your application with `ThemeProvider` and pass the `theme` to `ThemeProvider`. ThemeProvider will pass it over `context` to your styles creator function and to your props. After that you may change your theme, and all your components will get the new theme automatically.\n\nUnder the hood `react-jss` uses the unified CSSinJS `theming` solution for React. You can find [detailed docs in its repo](https://github.com/iamstarkov/theming).\n\nUsing `ThemeProvider`:\n\n* It has a `theme` prop which should be an `object` or `function`:\n  * If it is an `Object` and used in a root `ThemeProvider` then it's intact and being passed down the react tree.\n  * If it is `Object` and used in a nested `ThemeProvider` then it's being merged with theme from a parent `ThemeProvider` and passed down the react tree.\n  * If it is `Function` and used in a nested `ThemeProvider` then it's being applied to the theme from a parent `ThemeProvider`. If result is an `Object` it will be passed down the react tree, throws otherwise.\n* `ThemeProvider` as every other component can render only single child, because it uses `React.Children.only` in render and throws otherwise.\n* [Read more about `ThemeProvider` in `theming`'s documentation.](https://github.com/iamstarkov/theming#themeprovider)\n\n```javascript\nimport React from 'react'\nimport injectSheet, {ThemeProvider} from 'react-jss'\n\nconst Button = ({classes, children}) => (\n  <button className={classes.button}>\n    <span className={classes.label}>\n      {children}\n    </span>\n  </button>\n)\n\nconst styles = theme => ({\n  button: {\n    background: theme.colorPrimary\n  },\n  label: {\n    fontWeight: 'bold'\n  }\n})\n\nconst StyledButton = injectSheet(styles)(Button)\n\nconst theme = {\n  colorPrimary: 'green'\n}\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <StyledButton>I am a button with green background</StyledButton>\n  </ThemeProvider>\n)\n```\n\nIn case you need to access the theme but not render any CSS, you can also use `withTheme`. It is a Higher-order Component factory which takes a `React.Component` and maps the theme object from context to props. [Read more about `withTheme` in `theming`'s documentation.](https://github.com/iamstarkov/theming#withthemecomponent)\n\n```javascript\nimport React from 'react'\nimport injectSheet, {withTheme} from 'react-jss'\n\nconst Button = withTheme(({theme}) => (\n  <button>I can access {theme.colorPrimary}</button>\n))\n```\n\n_Namespaced_ themes can be used so that a set of UI components should not conflict with another set of UI components from a different library using also ```react-jss```.\n\n```javascript\nimport {createTheming} from 'react-jss'\n\n// Creating a namespaced theming object.\nconst theming = createTheming('__MY_NAMESPACED_THEME__')\n\nconst {ThemeProvider: MyThemeProvider} = theming\n\nconst styles = theme => ({\n  button: {\n    background: theme.colorPrimary\n  }\n})\n\nconst theme = {\n  colorPrimary: 'green'\n}\n\nconst Button = ({classes, children}) => (\n  <button className={classes.button}>\n    {children}\n  </button>\n)\n\n// Passing namespaced theming object inside injectSheet options.\nconst StyledButton = injectSheet(styles, { theming })(Button)\n\n// Using namespaced ThemeProviders - they can be nested in any order\nconst App = () => (\n  <OtherLibraryThemeProvider theme={otherLibraryTheme}>\n    <OtherLibraryComponent />\n    <MyThemeProvider theme={theme}>\n      <StyledButton>Green Button</StyledButton>\n    </MyThemeProvider>\n  <OtherLibraryThemeProvider>\n)\n```\n\n### Server-side rendering\n\nAfter the application is mounted, you should remove the style tag used by critical CSS rendered server-side.\n\n```javascript\nimport {renderToString} from 'react-dom/server'\nimport {JssProvider, SheetsRegistry} from 'react-jss'\nimport MyApp from './MyApp'\n\nexport default function render(req, res) {\n  const sheets = new SheetsRegistry()\n\n  const body = renderToString(\n    <JssProvider registry={sheets}>\n      <MyApp />\n    </JssProvider>\n  )\n\n  // Any instances of `injectSheet` within `<MyApp />` will have gotten sheets\n  // from `context` and added their Style Sheets to it by now.\n\n  return res.send(renderToString(\n    <html>\n      <head>\n        <style type=\"text/css\">\n          {sheets.toString()}\n        </style>\n      </head>\n      <body>\n        {body}\n      </body>\n    </html>\n  ))\n}\n```\n\n### React tree traversing\n\nFor traversing the React tree outside of the HTML rendering, you should add `disableStylesGeneration` property.\n\n```javascript\nimport * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport bootstrapper from 'react-async-bootstrapper'\n\nimport { JssProvider } from 'react-jss'\nimport MyApp from './MyApp'\n\nconst App = ({ disableStylesGeneration }) => (\n  <JssProvider disableStylesGeneration>\n    <MyApp />\n  </JssProvider>\n)\n\nasync function main() {\n  await bootstrapper(<App disableStylesGeneration />)\n  ReactDOM.render(<App />, document.getElementById('root'))\n}\n\nmain()\n```\n\n### Reuse styles in different components\n\nIn order to reuse the same styles __and__ the same generated style sheet between 2 entirely different and unrelated components, we suggest extracting a renderer component and reusing that.\n\n```javascript\nconst styles = {\n  button: {\n    color: 'red'\n  }\n}\nconst RedButton = injectSheet(styles)(({classes, children}) => (\n  <button className={classes.button}>{children}</button>\n))\n\nconst SomeComponent1 = () => (\n  <div>\n    <RedButton>My red button 1</RedButton>\n  </div>\n)\n\nconst SomeComponent2 = () => (\n  <div>\n    <RedButton>My red button 2</RedButton>\n  </div>\n)\n```\n\nAlternatively you can create own Style Sheet and use the `composes` feature. Also you can mix in a common styles object, but take into account that it can increase the overall CSS size.\n\n### The inner component\n\n```es6\nconst InnerComponent = () => null\nconst StyledComponent = injectSheet(styles, InnerComponent)\nconsole.log(StyledComponent.InnerComponent) // Prints out the inner component.\n```\n\n### The inner ref\n\nIn order to get a `ref` to the inner element, use the `innerRef` prop.\n\n```es6\nconst InnerComponent = () => null\nconst StyledComponent = injectSheet({})(InnerComponent)\n\n<StyledComponent innerRef={(ref) => {console.log(ref)}} />\n```\n\nIf you are using React 16.3 or higher we also support forwarding the ref to the InnerComponent.\n\n```es6\nconst InnerComponent = () => null\nconst StyledComponent = injectSheet({})(InnerComponent)\n\n<StyledComponent ref={(ref) => {console.log(ref)}} />\n```\n\n### Custom setup\n\nIf you want to specify a JSS version and plugins to use, you should create your [own JSS instance](https://github.com/cssinjs/jss/blob/master/docs/js-api.md#create-an-own-jss-instance), [setup plugins](https://github.com/cssinjs/jss/blob/master/docs/setup.md#setup-with-plugins) and pass it to `JssProvider`.\n\n```javascript\nimport {create as createJss} from 'jss'\nimport {JssProvider} from 'react-jss'\nimport vendorPrefixer from 'jss-vendor-prefixer'\n\nconst jss = createJss()\njss.use(vendorPrefixer())\n\nconst Component = () => (\n  <JssProvider jss={jss}>\n    <App />\n  </JssProvider>\n)\n```\n\nYou can also access the JSS instance being used by default.\n\n```javascript\nimport {jss} from 'react-jss'\n```\n\n### Multi-tree setup\n\nIn case you render multiple react rendering trees in one application, you will get class name collisions, because every JssProvider rerender will reset the class names generator. If you want to avoid this, you can share the class names generator between multiple JssProvider instances.\n\n__Note__: in case of SSR, make sure to create a new generator for __each__ request. Otherwise class names will become indeterministic and at some point you may run out of max safe integer numbers.\n\n```javascript\nimport {createGenerateClassName, JssProvider} from 'react-jss'\n\nconst generateClassName = createGenerateClassName()\n\nconst Component = () => (\n  <div>\n    <JssProvider generateClassName={generateClassName}>\n      <App1 />\n    </JssProvider>\n    <JssProvider generateClassName={generateClassName}>\n      <App2 />\n    </JssProvider>\n  </div>\n)\n```\n\nYou can also additionally use the `classNamePrefix` prop in order to add the app/subtree name to each class name.\nThis way you can see which app generated a class name in the DOM view.\n\n```javascript\nimport {JssProvider} from 'react-jss'\n\nconst Component = () => (\n  <div>\n    <JssProvider classNamePrefix=\"App1-\">\n      <App1 />\n    </JssProvider>\n    <JssProvider classNamePrefix=\"App2-\">\n      <App2 />\n    </JssProvider>\n  </div>\n)\n```\n\n### Decorators\n\n_Beware that [decorators are stage-2 proposal](https://tc39.github.io/proposal-decorators/), so there are [no guarantees that decorators will make its way into language specification](https://tc39.github.io/process-document/). Do not use it in production. Use it at your own risk and only if you know what you are doing._\n\nYou will need [babel-plugin-transform-decorators-legacy](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy).\n\n```javascript\nimport React, {Component} from 'react'\nimport injectSheet from 'react-jss'\n\nconst styles = {\n  button: {\n    backgroundColor: 'yellow'\n  },\n  label: {\n    fontWeight: 'bold'\n  }\n}\n\n@injectSheet(styles)\nexport default class Button extends Component {\n  render() {\n    const {classes, children} = this.props\n    return (\n      <button className={classes.button}>\n        <span className={classes.label}>\n          {children}\n        </span>\n      </button>\n    )\n  }\n}\n```\n\n## Injection order\n\nStyle tags are injected in the exact same order as the `injectSheet()` invocation.\nSource order specificity is higher the lower style tag is in the tree, therefore you should call `injectSheet` of components you want to override first.\n\nExample\n\n```js\n// Will render labelStyles first.\nconst Label = injectSheet(labelStyles)(({children}) => <label>{children}</label>)\nconst Button = injectSheet(buttonStyles)(() => <button><Label>my button</Label></button>)\n```\n\n## Whitelist injected props\n\nBy default \"classes\" and \"theme\" are going to be injected to the child component over props. Property `theme` is only passed when you use a function instead of styles object.\nIf you want to whitelist some of them, you can now use option `inject`. For e.g. if you want to access the StyleSheet instance, you need to pass `{inject: ['sheet']}` and it will be available as `props.sheet`.\n\nAll user props passed to the HOC will still be forwarded as usual.\n\n```js\n\n// Only `classes` prop will be passed by the ReactJSS HOC now. No `sheet` or `theme`.\nconst Button = injectSheet(styles, {inject: ['classes', 'sheet']})(\n  ({classes}) => <button>My button</button>\n)\n```\n\n## Contributing\n\nSee our [contribution guidelines](./contributing.md).\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2015 Dan Abramov, 2016-present Oleg Slobodskoi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-jss/-/react-jss-8.6.1.tgz#a06e2e1d2c4d91b4d11befda865e6c07fbd75252",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-jss/-/react-jss-8.6.1.tgz",
    "hash": "a06e2e1d2c4d91b4d11befda865e6c07fbd75252",
    "registry": "npm",
    "packageName": "react-jss"
  },
  "registry": "npm",
  "hash": "a06e2e1d2c4d91b4d11befda865e6c07fbd75252"
}